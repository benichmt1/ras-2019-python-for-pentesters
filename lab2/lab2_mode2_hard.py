#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  lab2.py
#  
################################################################################
# Lab 2
# =====
# Build a script to SSH into a host, execute a command to retrieve the
# environment variables then search for a series of sensitive information in
# files. The paramiko library is the only third party library in use here.
#
# Core Concepts
# -------------
# * Issuing commands and reading / writing files over SSH
# * Parsing files with regular expressions (regexs)
#
# Bonus Challenges
# ----------------
# 1) Handle authentication errors to prevent stack traces with incorrect passwords.
# 2) Add support for key-based authentication.
# 3) Add support for recursively searching through directories.
#

import argparse
import collections
import functools
import getpass
import re
import sys

import paramiko

# define a query named tuple to represent things to search for
Query = collections.namedtuple('Query', ('path', 'regex', 'description'))
queries = (
    Query(
        '/etc/king-phisher/server_config.yml',
        r'^\s+database:\s+(?P<secret>post\S+)$',
        'king-phisher database connection string'
    ),
    Query(
        '/etc/shadow',
        r'^[\w-]+:(?P<secret>\$[^:\s]+):',
        'crypt(3) password'
    ),
    Query(
        '$HOME/.pypirc',
        r'^password[:=]\s+(?P<secret>\S+)$',
        '.pypirc file password'
    )
)

def get_env_vars(ssh_client, with_pty=True):
    # todo: use the ssh_client to execute the 'env' command on the remote host,
    #   parse the results, and return a dictionary of environment variables
    return variables

def _var_repl(env_vars, match):
    var = match.group('variable')
    value = env_vars.get(var)
    if value is None:
        return var
    return value

# this function is documented using reStructuredText in the format used by
# Sphinx's autodoc extension
def expand_vars(string, env_vars=None):
    """
    Expand environment variables that are provided just like os.path.expandvars
    would, but using the specified *env_vars*.

    :param str string: The string to expand environment variables for.
    :param dict env_vars: The environment variables.
    :rtype: str
    """
    if env_vars is None:
        env_vars = os.environ
    # create a replacement callback function that uses env_vars as it's first
    # argument, additional arguments will be added after it
    repl_callback = functools.partial(_var_repl, env_vars)
    return re.sub(r'\$(?P<variable>[a-zA-Z]\w*)((?=[\W])|$)', repl_callback, string)

def main():
    # setup the arguments to consume from the command line
    parser = argparse.ArgumentParser(description='ssh file scanner')
    # todo: you're in hard mode now, write the script your self

if __name__ == '__main__':
    main()
